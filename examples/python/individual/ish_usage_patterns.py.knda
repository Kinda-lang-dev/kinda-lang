# ~ish Construct Usage Patterns - Complete Guide
# Demonstrates all three distinct ~ish patterns and their behaviors

~sorta print("=== ~ish Construct Usage Patterns Demo ===")
~sorta print("This example clarifies the three distinct ~ish usage patterns")
~sorta print()

# =============================================================================
# PATTERN 1: FUZZY VALUE CREATION (literal~ish)
# =============================================================================
~sorta print("--- Pattern 1: Fuzzy Value Creation ---")
~sorta print("Syntax: literal~ish (number followed by ~ish)")
~sorta print("Creates fuzzy values with ±2 default variance")
~sorta print()

# Basic fuzzy value creation
timeout = 5~ish          # Creates value between 3-7
delay = 100~ish          # Creates value between 98-102  
factor = 2.5~ish         # Creates float value with variance

~sorta print("timeout =", timeout, "(expected: 3-7)")
~sorta print("delay =", delay, "(expected: 98-102)")
~sorta print("factor =", factor, "(expected: ~0.5-4.5)")
~sorta print()

# Common use cases for value creation
api_timeout = 30~ish     # Network timeouts with variance
retry_delay = 1000~ish   # Retry delays to avoid thundering herd
jitter = 0.1~ish         # Small random offsets

~sorta print("api_timeout =", api_timeout)
~sorta print("retry_delay =", retry_delay) 
~sorta print("jitter =", jitter)
~sorta print()

# =============================================================================
# PATTERN 2: FUZZY COMPARISON (var ~ish target)
# =============================================================================
~sorta print("--- Pattern 2: Fuzzy Comparison ---")
~sorta print("Syntax: variable ~ish target (in conditionals/expressions)")
~sorta print("Returns True/False based on ±2 tolerance")
~sorta print()

# Basic fuzzy comparisons
score = 98
target_score = 100
health = 75
max_health = 80

~sorta print("score =", score, ", target_score =", target_score)
if score ~ish target_score:
    ~sorta print("✓ Score is close to target (within ±2)")
else:
    ~sorta print("✗ Score is not close to target")

~sorta print("health =", health, ", max_health =", max_health)
if health ~ish max_health:
    ~sorta print("✓ Health is nearly full")
else:
    ~sorta print("✗ Health needs attention")
~sorta print()

# Fuzzy comparisons in expressions
temperature = 72
ideal_temp = 70

is_comfortable = temperature ~ish ideal_temp
comfort_bonus = 10 if (temperature ~ish ideal_temp) else 0

~sorta print("temperature =", temperature, ", ideal_temp =", ideal_temp)
~sorta print("is_comfortable =", is_comfortable)
~sorta print("comfort_bonus =", comfort_bonus)
~sorta print()

# Fuzzy comparisons in function calls and complex expressions
values = [98, 100, 102, 95]
target = 100

~sorta print("Finding values close to", target, ":")
close_values = [v for v in values if v ~ish target]
~sorta print("close_values =", close_values)

# Using in max/min functions  
close_for_max = [v for v in values if v ~ish target]
best_match = max(close_for_max, default=0) if close_for_max else 0
~sorta print("best_match =", best_match)
~sorta print()

# =============================================================================
# PATTERN 3: VARIABLE MODIFICATION (var ~ish value)  
# =============================================================================
~sorta print("--- Pattern 3: Variable Modification ---")
~sorta print("Syntax: variable ~ish expression (as standalone statement)")
~sorta print("Assigns fuzzy result back to the variable")
~sorta print()

# Basic variable modification
balance = 100
energy = 50
~sorta print("Initial balance =", balance)
~sorta print("Initial energy =", energy)

balance ~ish 75          # Assigns value between 73-77 to balance
energy ~ish 80           # Assigns value between 78-82 to energy

~sorta print("After modification:")
~sorta print("balance =", balance, "(expected: 73-77)")
~sorta print("energy =", energy, "(expected: 78-82)")
~sorta print()

# Variable modification with expressions
base_damage = 10
multiplier = 1.5
damage = 20

~sorta print("base_damage =", base_damage, ", multiplier =", multiplier)
~sorta print("Initial damage =", damage)

damage ~ish base_damage * multiplier  # Assigns fuzzy result to damage
~sorta print("damage ~ish base_damage * multiplier")
~sorta print("New damage =", damage, "(expected: ~13-17)")
~sorta print()

# Progressive modifications
position = 0
~sorta print("Starting position =", position)

position ~ish position + 10  # Move forward with uncertainty
~sorta print("After forward move: position =", position, "(expected: 8-12)")

position ~ish position - 5   # Move back with uncertainty  
~sorta print("After backward move: position =", position, "(expected: varies)")
~sorta print()

# =============================================================================
# MIXED PATTERN USAGE EXAMPLE
# =============================================================================
~sorta print("--- Mixed Pattern Usage Example ---")
~sorta print("Demonstrating all three patterns working together")
~sorta print()

# Game-like scenario mixing all patterns
player_hp = 100
enemy_damage = 15~ish    # Pattern 1: Create fuzzy damage value
heal_amount = 20~ish     # Pattern 1: Create fuzzy heal value

~sorta print("Game Combat Simulation:")
~sorta print("player_hp =", player_hp)
~sorta print("enemy_damage =", enemy_damage, "(created with Pattern 1)")
~sorta print("heal_amount =", heal_amount, "(created with Pattern 1)")
~sorta print()

# Take damage (Pattern 3: Variable modification)
player_hp ~ish player_hp - enemy_damage
~sorta print("After taking damage: player_hp =", player_hp)

# Check if health is low (Pattern 2: Comparison)
if player_hp ~ish 50:
    ~sorta print("Health is ~ish low! Using healing potion.")
    player_hp ~ish player_hp + heal_amount  # Pattern 3: Variable modification  
    ~sorta print("After healing: player_hp =", player_hp)
else:
    ~sorta print("Health is okay, no healing needed")

# Final health check (Pattern 2: Comparison)
if player_hp ~ish 100:
    ~sorta print("Player is at ~ish full health!")
else:
    ~sorta print("Player health:", player_hp)
~sorta print()

# =============================================================================
# PERSONALITY SYSTEM INTEGRATION DEMO
# =============================================================================
~sorta print("--- Personality System Integration ---")
~sorta print("All ~ish patterns respect personality settings:")
~sorta print("• Reliable: ±1.0 variance/tolerance (minimal)")
~sorta print("• Cautious: ±1.5 variance/tolerance (moderate)")  
~sorta print("• Playful: ±2.0 variance/tolerance (standard)")
~sorta print("• Chaotic: ±3.0 variance/tolerance (maximum)")
~sorta print()

# Show current personality effects
test_value = 50~ish      # Pattern 1: Affected by personality
reference = 50
test_var = 50

~sorta print("Personality effects on ~ish patterns:")
~sorta print("test_value =", test_value, "(Pattern 1 with personality variance)")

if test_value ~ish reference:  # Pattern 2: Affected by personality
    ~sorta print("✓ Values are close (Pattern 2 with personality tolerance)")
else:
    ~sorta print("✗ Values are not close (Pattern 2 with personality tolerance)")

test_var ~ish 45         # Pattern 3: Affected by personality
~sorta print("test_var =", test_var, "(Pattern 3 with personality variance)")
~sorta print()

# =============================================================================
# BEST PRACTICES AND COMMON PATTERNS
# =============================================================================
~sorta print("--- Best Practices Summary ---")
~sorta print()
~sorta print("1. Pattern 1 (Value Creation): Use for constants that need variance")
~sorta print("   Examples: timeouts, delays, test data, random factors")
~sorta print()
~sorta print("2. Pattern 2 (Comparison): Use for approximate equality checks")  
~sorta print("   Examples: tolerances, 'close enough' conditions, ranges")
~sorta print()
~sorta print("3. Pattern 3 (Modification): Use for uncertain state changes")
~sorta print("   Examples: damage calculations, resource updates, drift simulation")
~sorta print()
~sorta print("4. Context matters: The transformer auto-detects patterns based on usage")
~sorta print("5. Personality affects all patterns: Adjust chaos settings as needed")
~sorta print()

~sorta print("=== End of ~ish Usage Patterns Demo ===")